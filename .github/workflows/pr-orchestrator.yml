name: PR Orchestrator

on:
  pull_request:
    branches: [main, master]

jobs:
  run-pr-checks:
    name: Run PR Checks
    runs-on: ubuntu-latest
    steps:
    - name: Trigger PR Checks workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('üöÄ Triggering PR Checks workflow...');
          
          const result = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'pr-checks.yml',
            ref: context.payload.pull_request.head.ref,
            inputs: {
              pr_number: context.payload.pull_request.number.toString(),
              pr_head_sha: context.payload.pull_request.head.sha
            }
          });
          
          console.log('‚úÖ PR Checks workflow triggered successfully');

    - name: Wait for PR Checks completion
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('‚è≥ Waiting for PR Checks workflow to complete...');
          
          const maxWaitTime = 30 * 60 * 1000; // 30 minutes
          const pollInterval = 30 * 1000; // 30 seconds
          const startTime = Date.now();
          
          while (Date.now() - startTime < maxWaitTime) {
            // Get recent workflow runs for PR Checks
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'pr-checks.yml',
              head_sha: context.payload.pull_request.head.sha,
              per_page: 10
            });
            
            console.log(`Found ${runs.data.workflow_runs.length} workflow runs for this SHA`);
            
            // Find the most recent run
            const latestRun = runs.data.workflow_runs[0];
            
            if (latestRun) {
              console.log(`Latest run status: ${latestRun.status}, conclusion: ${latestRun.conclusion}`);
              
              if (latestRun.status === 'completed') {
                if (latestRun.conclusion === 'success') {
                  console.log('‚úÖ PR Checks completed successfully');
                  core.setOutput('pr_checks_result', 'success');
                  return;
                } else {
                  console.log(`‚ùå PR Checks failed with conclusion: ${latestRun.conclusion}`);
                  core.setOutput('pr_checks_result', 'failure');
                  core.setFailed('PR Checks workflow failed');
                  return;
                }
              }
            }
            
            console.log('Still waiting...');
            await new Promise(resolve => setTimeout(resolve, pollInterval));
          }
          
          console.log('‚è∞ Timeout waiting for PR Checks completion');
          core.setOutput('pr_checks_result', 'timeout');
          core.setFailed('Timeout waiting for PR Checks workflow completion');

  run-traceability-matrix:
    name: Run Traceability Matrix
    runs-on: ubuntu-latest
    needs: run-pr-checks
    if: success()
    steps:
    - name: Trigger Traceability Matrix workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('üöÄ Triggering Traceability Matrix workflow...');
          
          const result = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'traceability-matrix.yml',
            ref: context.payload.pull_request.head.ref,
            inputs: {
              pr_number: context.payload.pull_request.number.toString(),
              pr_head_sha: context.payload.pull_request.head.sha
            }
          });
          
          console.log('‚úÖ Traceability Matrix workflow triggered successfully');

    - name: Wait for Traceability Matrix completion
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('‚è≥ Waiting for Traceability Matrix workflow to complete...');
          
          const maxWaitTime = 20 * 60 * 1000; // 20 minutes
          const pollInterval = 30 * 1000; // 30 seconds
          const startTime = Date.now();
          
          while (Date.now() - startTime < maxWaitTime) {
            // Get recent workflow runs for Traceability Matrix
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'traceability-matrix.yml',
              head_sha: context.payload.pull_request.head.sha,
              per_page: 10
            });
            
            console.log(`Found ${runs.data.workflow_runs.length} workflow runs for this SHA`);
            
            // Find the most recent run
            const latestRun = runs.data.workflow_runs[0];
            
            if (latestRun) {
              console.log(`Latest run status: ${latestRun.status}, conclusion: ${latestRun.conclusion}`);
              
              if (latestRun.status === 'completed') {
                if (latestRun.conclusion === 'success') {
                  console.log('‚úÖ Traceability Matrix completed successfully');
                  return;
                } else {
                  console.log(`‚ö†Ô∏è Traceability Matrix completed with conclusion: ${latestRun.conclusion}`);
                  return; // Don't fail the orchestrator if matrix generation has issues
                }
              }
            }
            
            console.log('Still waiting...');
            await new Promise(resolve => setTimeout(resolve, pollInterval));
          }
          
          console.log('‚è∞ Timeout waiting for Traceability Matrix completion');
          console.log('‚ÑπÔ∏è Continuing without failing (matrix generation is not critical)');
