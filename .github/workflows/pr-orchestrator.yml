name: PR Orchestrator

on:
  pull_request:
    branches: [main, master]

jobs:
  pr-checks:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pyyaml jsonschema click openpyxl
        pip install -e .

    - name: Install cdlreq
      run: |
        git clone https://github.com/SeanHgh/cdlreq.git /tmp/cdlreq
        cd /tmp/cdlreq && pip install -e . || echo "Using manual setup"
        export PYTHONPATH="/tmp/cdlreq:$PYTHONPATH"

    - name: Validate specifications exist
      run: |
        if [ ! -d "requirements" ]; then
          echo "‚ùå No requirements directory found"
          exit 1
        fi
        
        REQ_COUNT=$(find requirements -name "*.yaml" -not -path "*/specifications/*" | wc -l)
        SPEC_COUNT=$(find requirements/specifications -name "*.yaml" 2>/dev/null | wc -l || echo 0)
        
        echo "Found $REQ_COUNT requirements and $SPEC_COUNT specifications"
        
        if [ $REQ_COUNT -eq 0 ]; then
          echo "‚ùå No requirements found"
          exit 1
        fi
        
        if [ $SPEC_COUNT -eq 0 ]; then
          echo "‚ùå No specifications found"
          exit 1
        fi
        
        echo "‚úÖ Requirements and specifications validation passed"

    - name: Run tests
      run: |
        echo "Running pytest to capture test execution (not checking results)..."
        pytest tests/ --tb=short -v > pytest_output.txt 2>&1 || echo "Tests completed (some may have failed, but we only check execution)"
        echo "Pytest output captured to pytest_output.txt"

    - name: Check test coverage
      run: |
        echo "Checking if all specification unit tests were executed..."
        
        # Extract unit test paths from specifications
        echo "Extracting unit tests from specifications..."
        MISSING_TESTS=""
        TOTAL_SPEC_TESTS=0
        EXECUTED_TESTS=0
        
        for spec_file in requirements/specifications/*.yaml; do
          if [ -f "$spec_file" ]; then
            # Extract unit_test field from each specification
            UNIT_TEST=$(grep "unit_test:" "$spec_file" | sed 's/.*unit_test: *//' | tr -d '"' | tr -d "'" | xargs)
            if [ ! -z "$UNIT_TEST" ] && [ "$UNIT_TEST" != "null" ]; then
              TOTAL_SPEC_TESTS=$((TOTAL_SPEC_TESTS + 1))
              echo "Checking if test exists: $UNIT_TEST"
              
              # Check if this test appears in pytest output (regardless of pass/fail)
              if grep -q "$UNIT_TEST" pytest_output.txt; then
                echo "‚úÖ Found executed: $UNIT_TEST"
                EXECUTED_TESTS=$((EXECUTED_TESTS + 1))
              else
                echo "‚ùå Missing execution: $UNIT_TEST"
                MISSING_TESTS="$MISSING_TESTS\n- $UNIT_TEST"
              fi
            fi
          fi
        done
        
        echo "===================="
        echo "COVERAGE SUMMARY:"
        echo "Total specification tests: $TOTAL_SPEC_TESTS"
        echo "Executed tests: $EXECUTED_TESTS"
        echo "Missing tests: $((TOTAL_SPEC_TESTS - EXECUTED_TESTS))"
        
        if [ $EXECUTED_TESTS -eq $TOTAL_SPEC_TESTS ]; then
          echo "‚úÖ All specification unit tests were executed"
        else
          echo "‚ùå Some specification unit tests were not executed:"
          echo -e "$MISSING_TESTS"
          echo ""
          echo "üö´ Blocking PR merge - all specification unit tests must be executed"
          exit 1
        fi

  traceability-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    needs: pr-checks
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install cdlreq
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml jsonschema click openpyxl
        git clone https://github.com/SeanHgh/cdlreq.git /tmp/cdlreq
        cd /tmp/cdlreq && pip install -e . || echo "Using manual setup"

    - name: Generate matrix
      run: |
        export PYTHONPATH="/tmp/cdlreq:$PYTHONPATH"
        python -c "from cdlreq.cli.commands import cli; cli(['export', '--directory', '.', '--output', 'requirements/traceability_matrix.xlsx'])"

    - name: Commit matrix
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add requirements/traceability_matrix.xlsx
        git diff --staged --quiet || git commit -m "Update traceability matrix"
        git push || echo "No changes to push"